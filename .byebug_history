quit!
params
quit!
@user
quit
params
quit!
params
quit!
params
quit!
@root_categories
quit!
@root_categories
@dates.each{ |date| @comments.select{ |comment| return comment.created_at>Time.parse(date).midnight && comment.created_at<Time.parse(date).end_of_day}}
@dates.each{ |date| @comments.select{ |comment| puts comment.created_at>Time.parse(date).midnight && comment.created_at<Time.parse(date).end_of_day}}
@dates.each{ |date| @comments.select{ |comment| comment.created_at>Time.parse(date).midnight && comment.created_at<Time.parse(date).end_of_day}}
@dates.each{ |date| @comments.select{ |comment| comment.created_at>Time.parse(date).midnight && comment.created_at<Time.parse(date).end_of_day} 
@dates.each do |date|
quit!
@comments.select{ |comment| comment.created_at>time.midnight && comment.created_at<time.end_of_day }
time = Time.parse(@dates.last)
@dates.last
@dates
quit!
@comments.select{ |comment| comment.created_at>time.midnight&&comment.created_at<time.end_of_day }
@comments.select{ |comment| comment.created_at>time.midnight&&created_at<time.end_of_day }
@comments.select{ |created_at| created_at>time.midnight&&created_at<time.end_of_day }
time = Time.parse("2018-02-10")
@comments = Comment.find(notifiable_id)
notifiable_id = current_user.notifications.pluck(:notifiable_id)
quit!
y
:q!
@comments = Comment.find(notifiable_id)
notifiable_id = current_user.notifications.pluck(:notifiable_id)
@comments.select{ |created_at| created_at>time.midnight&&created_at<time.end_of_day }
@comments = Comment.find(notifiable_id)
quit!
@comments.select{|comment| time.midnight..time.end_of_day includes? comment.created_at}
@comments.select{|comment| time.midnight..time.end_of_day include? comment.created_at}
@comments.select{|comment|comment.created_at in time.midnight..time.end_of_day}
@comments.select{|comment|comment.created_at: time.midnight..time.end_of_day}
@comments.select(created_at: time.midnight..time.end_of_day)
time = Time.parse("2018-02-10")
 @comments = Comment.find(notifiable_id)
notifiable_id = current_user.notifications.pluck(:notifiable_id)
quit!
"2018-02-10".beginning_of_day()
@comments.pluck(:created_at).map{ |time| time.strftime("%Y-%m-%d") }.uniq
@comments = Comment.find(notifiable_id)
notifiable_id = current_user.notifications.pluck(:notifiable_id)
exit
@comments.pluck(:created_at).map{ |time| time.strftime("%Y-%m-%d") }.uniq.sort
@comments.pluck(:created_at).map{ |time| time.strftime("%Y-%m-%d") }.uniq
@comments = Comment.find(notifiable_id)
notifiable_id = current_user.notifications.pluck(:notifiable_id)
quit!
cc = @comments.pluck(:created_at).map{ |time| time.strftime(
reload!
cc = @comments.pluck(:created_at).map{ |time| time.strftime("%Y-%m-%d") }.uniq
cc = @comments.pluck(:created_at).map{ |time| time.strftime("%Y-%m-%d") }
cc = @comments.pluck(:created_at).map(&:strftime("%Y-%m-%d"))
cc = @comments.pluck(:created_at).map{ |cc| cc.strftime("%Y-%m-%d") }
cc = @comments.pluck(:created_at).each{ |cc| cc.strftime("%Y-%m-%d") }
cc = @comments.pluck(:created_at).strftime("%Y-%m-%d")
cc = @comments.pluck(:created_at).first.strftime("%Y-%m-%d")
cc = @comments.pluck(:created_at).first.strftime("%Y-%m-%d %H:%M:%S")
cc = @comments.pluck(:created_at).first
cc
cc = @comments.pluck(:created_at).each{ |time| time.strftime("%Y-%m-%d")}
@comments.pluck(:created_at).each{ |time| time.strftime("%Y-%m-%d")}
@comments.pluck(:created_at).each{ |time| time.strftime("%Y-%m-%d %H:%M:%S")}
@comments.pluck(:created_at).first
@comments.pluck(:created_at).class
@comments.pluck(:created_at)
@comments.pluck(:created_at).uniq(&:first)
@comments.pluck(:created_at).each(&:unique)
@comments.pluck(:created_at).each(&:strftime)
@comments.pluck(:created_at).each(&:strftime("%Y-%m-%d %H:%M:%S"))
@comments.pluck(:created_at)
@comments = Comment.find(notifiable_id)
notifiable_id = current_user.notifications.pluck(:notifiable_id)
quit!
@comments.pluck(:created_at).each(&:)
@comments.pluck(:created_at)
@comments.(:&created_at)
@comments.pluck(:created_at)
@comments = Comment.find(notifiable_id)
notifiable_id = current_user.notifications.pluck(:notifiable_id)
quit!
@comments.size
@comments = Comment.find(notifiable_id)
notifiable_id = current_user.notifications.pluck(:notifiable_id)
quit!
quit！
params[:filename]
params[:action]
params
params[:portrait].original_filename
params[:portrait][@original_filename]
params[:portrait][:avatar]
params[:portrait]
paras[:portrait]
parmas[:portrait]
params
params[:portrait].original_filename
params[:portrait].filename
params[:portrait][:filename]
params[:portrait]
params[:portrait][:name]
params
quit!
params
quit!
params[:portrait]
params
quit!
params
quit!
params
quit!
params
quit!
params
quit
params
quit!
params
quit!
params
quit
params
quit
params
quit
params
quit
quit!
params
quit!
params
quit
controller_name
params
quit!
params
quit!
params
quit!
params[:portrait][:avatar]
params[:portrait]
params[portrait]
quit!
params[:portrait][:avatar]
params
quit
params
quit!
params
quit!
params
quit
params[:preview]
params
quit!
params[:article_ids].nil?
params[:article_ids]
quit!
params[:article_ids]
quit!
@articles.size
@articles.nil?
@articles
quit!
next
quit!
@articles.size
@articles
@articles.first.destroy
@articles.first
@articles
quit!
params[:article_ids]
params
exit
params[:article][:article_ids]
params[article][:article_ids]
params
params[:article_ids]
quit
params[:article]
params
params([article])
params[article]
params
quit!
params
quit!
params
exit
@user.avatar.to_s.size == 0
@user.avatar.to_s.size
@user.avatar
@user.reset_sent_at
@user.admin
@user.id
@user.avatar.to_s.nil?
@user.avatar.to_s
@user.avatar.to_a
@user.avatar
@user
exit
@user.avatar.to_s.nil?
@user.avatar.to_s
@user.avatar.to_i
@user.avatar.nil?
@user.avatar
@user
quit
crop_h
crop_wh
crop_w
crop_z
crop_y
crop_x
ls
exit
params[:portrait]
params[:croxxp_x]
params[:croxx'p_x]
params[:crop_x]
params
exit
crop_x.present?
crop_x
avatar
exit
crop_x.present?
crop_x
quit
next
n
exit
params[:portrait]
params
quit
quit!
params[:user_id]
params
quit!
params[:portrait]
params
quit!
@article = current_user.articles.friendly.find_by(id: params[:id])
current_user.articles.friendly.find(params[:id])
